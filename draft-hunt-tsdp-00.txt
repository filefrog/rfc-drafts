



INTERNET-DRAFT                                                   J. Hunt
Intended Status: Proposed Standard                      NiftyLogic, Inc.
Expires: July 27, 2016                                  January 24, 2016


               Telemetry and Sensor Data Protocol -- TSDP
                           draft-hunt-tsdp-00


Abstract

   This document describes the Telemetry and Sensor Data Protocol (TSDP)
   an application-layer protocol for submission, aggregation and
   dissemination of measurements and observations about monitored hosts,
   the applications that run on them, and the services that they
   provide.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.   Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.   It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress..

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/1id-abstracts.html

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html


Copyright and License Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors. All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document. Please review these documents



J. Hunt                  Expires July 27, 2016                  [Page 1]

INTERNET DRAFT                    TSDP                  January 24, 2016


   carefully, as they describe your rights and restrictions with respect
   to this document. Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Table of Contents

   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  3
   2  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1  Collected Data  . . . . . . . . . . . . . . . . . . . . . .  4
       2.1.1  Continuous Data . . . . . . . . . . . . . . . . . . . .  4
       2.1.2  Non-continuous Data . . . . . . . . . . . . . . . . . .  5
     2.2  Aggregation . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3  Broadcast and Subscription  . . . . . . . . . . . . . . . .  6
   3  Qualified Names . . . . . . . . . . . . . . . . . . . . . . . .  7
     3.1  ABNF Grammar  . . . . . . . . . . . . . . . . . . . . . . .  7
     3.2  Equivalance and Comparison  . . . . . . . . . . . . . . . .  7
     3.3  Examples of Equivalence . . . . . . . . . . . . . . . . . .  8
   4  Wire Protocol . . . . . . . . . . . . . . . . . . . . . . . . .  9
     4.1  PDU Format  . . . . . . . . . . . . . . . . . . . . . . . .  9
       4.1.1  PDU Header Format . . . . . . . . . . . . . . . . . . .  9
       4.1.2  PDU Frame Format  . . . . . . . . . . . . . . . . . . . 10
     4.2  Bogons  . . . . . . . . . . . . . . . . . . . . . . . . . . 12
       4.2.1  Malformed Headers . . . . . . . . . . . . . . . . . . . 12
       4.2.2  Malformed Frames  . . . . . . . . . . . . . . . . . . . 13
       4.2.3  Additional Rules  . . . . . . . . . . . . . . . . . . . 13
       4.2.4  Handling Bogons . . . . . . . . . . . . . . . . . . . . 13
     4.3  PDU Specification . . . . . . . . . . . . . . . . . . . . . 14
       4.3.1  HEARTBEAT PDU . . . . . . . . . . . . . . . . . . . . . 14
       4.3.2  SUBMIT PDU  . . . . . . . . . . . . . . . . . . . . . . 14
       4.3.3  BROADCAST PDU . . . . . . . . . . . . . . . . . . . . . 17
       4.3.4  FORGET PDU  . . . . . . . . . . . . . . . . . . . . . . 20
       4.3.5  REPLAY PDU  . . . . . . . . . . . . . . . . . . . . . . 21
       4.3.6  SUBSCRIBE PDU . . . . . . . . . . . . . . . . . . . . . 21
   5  Security Considerations . . . . . . . . . . . . . . . . . . . . 23
   6  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 23
   7  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 23
     7.1  Normative References  . . . . . . . . . . . . . . . . . . . 23
     7.2  Informative References  . . . . . . . . . . . . . . . . . . 23
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 23







J. Hunt                  Expires July 27, 2016                  [Page 2]

INTERNET DRAFT                    TSDP                  January 24, 2016


1  Introduction

   Monitoring is an essential component of any successful systems
   architecture. The data provided by accurate monitoring systems proves
   invaluable in early problem detection, root-cause post-mortem
   analysis, performance troubleshooting, and capacity forecasting.
   Self-healing systems can be implemented using collected monitoring
   data to dispatch automated agents to fix problems and/or allocate
   more resources as thresholds are exceeded.

   The Telemetry and Sensor Data Protocol (TSDP) is a lightweight,
   connection-less protocol that uses small, platform-independent,
   binary datagrams for submission and dissemination of monitored data.
   It provides semantics for aggregation of collected measurements, and
   defines a means for consumers of those measurements to opt-in to
   receive aggregates of interest.

   The intent of TSDP is to provide a well-specified standard for
   building monitoring systems.

1.1  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


























J. Hunt                  Expires July 27, 2016                  [Page 3]

INTERNET DRAFT                    TSDP                  January 24, 2016


2  Overview

   TSDP enables independent hosts (referred to as "collectors") to
   submit data to other hosts ("aggregators") that perform summary
   transformations on the collected data, and then disseminate this
   summarized information to other hosts (called "subscribers") who then
   act on the data.

   Aggregators are almost always large, dedicated systems that are built
   with the singular purpose of implementing the behaviors defined in
   this specification: data submission, summarization, and broadcast.

   Collectors can be anything: a software agent that regularly polls the
   /proc file system to determine how much CPU time has been used, a
   scheduled task that queries network devices via SNMP for traffic and
   memory statistics, or a log processor that extracts event data from
   syslog streams.

   Subscribers can be likewise diverse, providing event correlation,
   problem notification, scale-up / scale-down provisioning, data
   visualization, and more.

   Decoupling these three monitoring system components -- collector,
   aggregator and subscriber -- allows each to evolve independently, and
   affords system designers more flexibility in initial implementation
   and future extensibility.  TSDP provides a protocol to ensure that
   the parts still function correctly, as a cohesive whole.


2.1  Collected Data

   Collected data comes in a handful of distinct types, each with its
   own purpose and associated semantics.

2.1.1  Continuous Data


2.1.1.1  Sample Measurements

   Samples represent discrete measurements of a continuous value.  No
   calculations or rate transformations will be done on the individual
   samples. Aggregation and summary transformations may still be
   performed.

   Available server memory is a Sample measurement; each reading is
   independent of all previous and future readings.

2.1.1.2  Delta Measurements



J. Hunt                  Expires July 27, 2016                  [Page 4]

INTERNET DRAFT                    TSDP                  January 24, 2016


   Often, measurements are only supplied as absolute, ever-increasing
   counters. In SNMP network monitoring, traffic isn't tracked as a rate
   per unit of time; instead, the number of packets or bytes sent so far
   is stored as a 64-bit unsigned counter.  Every time the device sends
   another packet or byte, the counter is increased.

   These are Delta measurements.

   Aggregators handle Delta measurements by keeping track of the
   earliest and most recent values for a time window.  When that window
   closes, the delta, or change in value, is calculated and stored as
   the value of the whole measurement.  This allows absolute, counter-
   style values like "bytes sent" to be turned into a more usable rate.

2.1.1.3  Tally Measurements

   Like Delta measurements, Tally measurements calculate the rate of
   change of a value, except that the individually submitted values are
   treated as increments to the most recent value, instead of absolute
   values.

   Tally measurements are perfect for counting discrete events as they
   happen. For example, a collector could increment a Tally measurement
   for every failed login attempt, and let the aggregator figure out the
   authentication failure rate on a per-minute basis.

2.1.1.4  States

   States represent the result of discrete checks performed against the
   world, and combine a disposition (okay, warning, etc.) with a message
   string that may provide additional context for the state.

2.1.2  Non-continuous Data

2.1.2.1  Events

   Events represent singleton occurrences of an arbitrary nature.
   Systems may fire events for service restarts, system authentication
   failure (via sudo, for example), etc.

2.1.2.2  Facts

   Systems often need to communicate non-metric, non-static information
   to monitoring systems and their consumers, including things like disk
   layout, available resources, naming, configuration and more.  As
   systems become more dynamic, this need grows stronger.

   TSDP accommodates this need via Facts.  Each Fact represents some



J. Hunt                  Expires July 27, 2016                  [Page 5]

INTERNET DRAFT                    TSDP                  January 24, 2016


   piece of information about monitored systems.  They are tracked by
   the aggregators, and fact values are updated when new values are
   submitted.  Facts do not expire (and are therefore non-continuous).

2.2  Aggregation


2.3  Broadcast and Subscription











































J. Hunt                  Expires July 27, 2016                  [Page 6]

INTERNET DRAFT                    TSDP                  January 24, 2016


3  Qualified Names

   Every piece of collected data is identified by a globally unique
   Qualified Name, chosen based on the needs of system designers and
   their problem domain.

3.1  ABNF Grammar

   Here is the Augmented Backus-Naur Grammar for qualified names:

   ws         = " "
   glob       = "*"
   character  = %x21-29 / %x2b / %x2d-3c / %x3e-5b / %x5d-7e /
                    ; all printable characters
                    ; except "*", ",", "=" or "\".

                %x5c.%x2a / %x5c.%x2c / %x5c.%x3d / %x5c.%x5c
                    ; backslash escape sequences
                    ; for literal "*", ",", "=" and "\".

   key        = 1*character
   value      =  *character     ; values can be empty
   component  = glob / ( key *ws "=" *ws ( value / glob ) )

   name       = *( component *ws "," *ws ) component

   Informally, each qualified name is composed of one or more key/value
   pairs, separated by commas.  The key and value are separated by an
   equal sign, and whitespace is optional around all delimiters.  The
   asterisk character "*" signifies a glob used for partial matching.

   To encode a literal "=", "," or "*", precede it with a single
   backslash, "\".  To encode a literal backslash, precede it with a
   single backslash, yielding "\\".

3.2  Equivalance and Comparison

   It is often necessary to determine if two Qualified Names are
   equivalent, for purposes of aggregation and data analysis.  However,
   because of whitespace and re-ordering of key-value pairs, two
   qualified names may be lexically different but semantically
   equivalent.









J. Hunt                  Expires July 27, 2016                  [Page 7]

INTERNET DRAFT                    TSDP                  January 24, 2016


   Two qualified names are equivalent if they are byte-for-byte equal
   after the following normalizing transformations:

    1. remove optional whitespace around key/value delimiter ("=")
    2. remove optional whitespace around key/value pairs
    3. normalize case of keys
    4. reorder key/value pairs by sorting keys lexically

3.3  Examples of Equivalence

    The following Qualified names are equivalent:

    A) host=foo.example.com,type=cpu,CPU=0
    B) host=foo.example.com, type=cpu, CPU=0
    C) host=foo.example.com, TYPE=cpu, cpu=0
    D) type=cpu, CPU=0, host=foo.example.com
    E) type = cpu,   CPU = 0,    host = foo.example.com

    A and B are equivalent per rule #2.  B and C are equivalent per rule
    #3.  C and D are equivalent per rule #4.  D and E are equivalent per
    rule #4 (ordering key/value pairs before comparison)






























J. Hunt                  Expires July 27, 2016                  [Page 8]

INTERNET DRAFT                    TSDP                  January 24, 2016


4  Wire Protocol

    TSDP components communicate by exchanging Protocol Data Units (PDUs)
    with one another, over UDP.  Each PDU consists of a HEADER and one
    or more FRAMEs.

4.1  PDU Format

   +-----------------------------------------------+
   |                    HEADER                     |
   +-----------------------------------------------+
   |                   FRAME #1                    |
   +-----------------------------------------------+
   |                      ...                      |
   +-----------------------------------------------+
   |                   FRAME #N                    |
   +-----------------------------------------------+

4.1.1  PDU Header Format

   The HEADER provides metadata about the PDU, including the version of
   the Bolo protocol that governs the encoding and behavior, an OPCODE,
   a PAYLOAD and a set of operation-specific FLAGS.

   The HEADER is exactly 32-bits long:

    0                             1
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   |  VERSION  |  OPCODE   |         FLAGS         |
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   |                  PAYLOAD                      |
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

4.1.1.1  VERSION Field

   The 4-bit VERSION field identifies what version of the protocol (and,
   by extension, this specification) was used to generate the PDU.  This
   allows for future expansion of the wire protocol.  Future versions of
   this specification will identify where any behavior is expected to
   diverge, based on the protocol version.

   Currently allocated bit patterns for VERSION are:

   [ 0000 ]  (0)  <malformed version>
   [ 0001 ]  (1)  v1
      ..     ...  (reserved for future use)
   [ 1111 ]  (F)  (reserved for future use)



J. Hunt                  Expires July 27, 2016                  [Page 9]

INTERNET DRAFT                    TSDP                  January 24, 2016


4.1.1.2  OPCODE Field

   The 4-bit OPCODE field controls the syntax and semantics of both the
   FLAGS field and the FRAMEs that comprise the rest of the PDU.

   Currently allocated bit patterns for OPCODE are:

   [ 0000 ]  (0)  HEARTBEAT
   [ 0001 ]  (1)  SUBMIT
   [ 0010 ]  (2)  BROADCAST
   [ 0011 ]  (3)  FORGET
   [ 0011 ]  (4)  REPLAY
   [ 0100 ]  (5)  SUBSCRIBE
      ..     ...  (reserved for future use)
   [ 1111 ]  (F)  (reserved for future use)

4.1.1.3  FLAGS Field

   The 8-bit FLAGS field is reserved for use by OPCODEs.

4.1.1.4  PAYLOAD Field

   The 16-bit PAYLOAD field provides some additional context to the
   OPCODE value, by specifying which type of data the operation should
   constrain itself to.

   [ 0000 0000  0000 0000 ]  (00 00)  (none)

   [ 0000 0000  0000 0001 ]  (00 01)  SAMPLE
   [ 0000 0000  0000 0010 ]  (00 02)  TALLY
   [ 0000 0000  0000 0100 ]  (00 04)  DELTA
   [ 0000 0000  0000 1000 ]  (00 08)  STATE
   [ 0000 0000  0001 0000 ]  (00 10)  EVENT
   [ 0000 0000  0010 0000 ]  (00 20)  FACT

   [ 1111 1111  1100 0000 ]  (FF 70)  (reserved)

   [ 1111 1111  1111 1111 ]  (FF FF)  (all)

4.1.2  PDU Frame Format

   The actual data of TSDP PDUs lives in one or more frames.  Each frame
   consists of a small, fixed-size 16-byte metadata header.








J. Hunt                  Expires July 27, 2016                 [Page 10]

INTERNET DRAFT                    TSDP                  January 24, 2016


    0                             1
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   |FF|  TYPE  |          LENGTH                   |
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   |                    (data)                     |
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

4.1.2.1  FF Field

   The 1-bit FF field identifies whether or not this frame is the last
   one in the PDU, or if more frames follow.

   [ 0 ]  (0)  No; more frames follow this one
   [ 1 ]  (1)  Yes; this is the final frame

4.1.2.2  TYPE Field

   The 3-bit TYPE field identifies the type of value that this frame
   encodes.

   [ 000 ]  (0)  UINT     unsigned integer (32/64-bit, per LENGTH)
   [ 001 ]  (1)  FLOAT    floating-point number (IEEE-754 float32/64)
   [ 010 ]  (2)  STRING   raw string data (LENGTH octets)
     ...    ...  ...      (reserved)
   [ 110 ]  (6)  TSTAMP   timestamp in ms since UNIX epoch (uint64)
   [ 111 ]  (7)  NIL      nil frame / no body

   UINT provides unsigned integer data, encoded in big-endian format,
   where the first bit in the payload is the most significant.

   FLOAT provides floating point decimal data of arbitrary precision,
   per the encoding rules specified in IEEE-754 for float32 and float64
   values.  This transparently handles both non-numbers (NaN) and
   infinite values (Inf).

   STRING provides arbitrary, utf8-encoded text data.

   TSTAMP provides wall time, with millisecond precision.  Values
   represent number of milliseconds that have elapsed since the UNIX
   epoch, January 1st, 1970 00:00:00 UTC+0000.

   NIL provides a non-type, which has no value.

4.1.2.3  LENGTH Field

   The 12-bit LENGTH field identifies how many additional bytes (beyond
   the 16-bit frame header) of data are included in the frame.  This is



J. Hunt                  Expires July 27, 2016                 [Page 11]

INTERNET DRAFT                    TSDP                  January 24, 2016


   the length of the payload.

4.1.2.3.1  TYPE-specific Sizing Requirements

   Some TYPE field values mandate specific LENGTH values.

   The UINT type (0) requires that the LENGTH field be either 32 or 64,
   depending on whether the value is a 32-bit or 64-bit unsigned
   integer.

   The FLOAT type (1) requires that the LENGTH field be either 32 or 64,
   depending on whether the value is a 32-bit or 64-bit floating point
   number, per IEEE-754.

   The STRING type (2) places no explicit requirements on the LENGTH of
   a frame.  STRING frames with a zero LENGTH represent the empty
   string, "".

   The TSTAMP type (6) requires that the LENGTH field be 64, since all
   timestamp values are encoded as 64-bit unsigned integers.

   The NIL type (7) requires that the LENGTH field be 0, since NIL
   frames have no value.

4.1.2.3.2  LENGTH Limits

   The maximum value of the 12-bit LENGTH field is (2^12)-1, or 4095.
   This places an upper limit on the size of variable data frames like
   STRING, of 4095 octets.  This limitation has been deemed acceptable,
   given the purpose of TSDP as a protocol for building monitoring
   systems.

   This upper limit does not hinder fixed-size frame types like UINT,
   FLOAT, TSTAMP and NIL.

4.2  Bogons

   A Bogon is a malformed, internally-inconsistent or otherwise
   suspicious protocol data unit that MUST be ignored by conforming
   implementations.

4.2.1  Malformed Headers









J. Hunt                  Expires July 27, 2016                 [Page 12]

INTERNET DRAFT                    TSDP                  January 24, 2016


   A Malformed Header is any PDU header that meets any or all of the
   following criteria:

    1. Unrecognized value for the VERSION field
    2. Unrecognized value for the OPCODE field
    3. Unrecognized value for the PAYLOAD field

    Any PDU found to have a Malformed Header MUST be considered a Bogon,
    regardless of whether or not its data frames are well-formed.

4.2.2  Malformed Frames

    A Malformed Frame is any PDU data frame that meets any or all of the
    following criteria:

    1. Unrecognized value for the TYPE field
    2. Incorrect LENGTH value, given the TYPE value (per 4.1.2.3.1)
    3. Short Frames, where LENGTH is larger than the remainder of the frame

    Any PDU found to have a Malformed Frame MUST be considered a Bogon,
    regardless of whether the header, or other data frames are well-
    formed.

4.2.3  Additional Rules

    In addition to the previous rules for Bogon detection, a PDU MUST be
    considered a Bogon if:

    1. The number of frames does not match the requirements of the OPCODE
    2. The types of frames do not match the requirements of the OPCODE
    3. The PAYLOAD is invalid per the definition of the OPCODE

    Furthermore, OPCODEs are free to mandate that a PDU be considered a
    Bogon based on semantic rules applied to the contents of data
    frames, flags and more.

4.2.4  Handling Bogons

    Conforming implementations MUST read and discard any Bogon. All
    constituent data frames MUST be read and discarded, and action MUST
    NOT be taken in response to the PDU.

    Implementations MAY log such failures, to assist administrators and
    system designers in troubleshooting resultant data loss and other
    issues.






J. Hunt                  Expires July 27, 2016                 [Page 13]

INTERNET DRAFT                    TSDP                  January 24, 2016


4.3  PDU Specification

4.3.1  HEARTBEAT PDU

    Clients submitting data to an aggregator may also opt to send
    HEARTBEAT packets that identify how many UDP packets have been
    transmitted by the client to the core.  This enables a rudimentary
    form of packet-loss detection, since the aggregator will keep track
    of the number of packets received from the sender.

    Packets are tracked based on the tuple (sender-ip, sender-port).

4.3.1.1  Applicable PAYLOADs

    None.

    If the PAYLOAD field is not set to all zeroes, the PDU must be
    considered a Bogon PDU.

4.3.1.2  Data Frames

    Each HEARTBEAT PDU MUST consist of exactly two data frames, a TSTAMP
    frame which indicates when the measurement was taken, followed by a
    UINT/64 frame that contains the number of packets transmitted so
    far:

            1 (tstamp/64)   Time of measurement
            1 (uint/64)     Number of packets transmitted so far

4.3.1.3  Flags

   +--+--+--+--+--+--+--+--+
   |Ro| ... (reserved) ... |
   +--+--+--+--+--+--+--+--+

   Ro (ROLLOVER) is a 1-bit boolean flag that indicates whether or not
   the packet value (frame 2) has rolled over since the last submission.

4.3.2  SUBMIT PDU

   The SUBMIT opcode allows client systems to provide measurement, state
   and auxiliary data to the aggregator(s).

4.3.2.1  Applicable PAYLOADs

   The only applicable PAYLOAD values for this opcode are:

          SAMPLE      TALLY        DELTA



J. Hunt                  Expires July 27, 2016                 [Page 14]

INTERNET DRAFT                    TSDP                  January 24, 2016


          STATE       EVENT        FACT

          A PAYLOAD value must be supplied.  Any PDUs found without a
          PAYLOAD value set MUST be considered Bogon PDUs.

          PAYLOAD values cannot be combined.  Any PDUs found with
          multiple PAYLOAD values set MUST be considered Bogon PDUs.

          Composition of constituent data frames, as well as the
          semantics of the FLAGS field depends on the PAYLOAD in use.
          These will be specified in the following subsections.

4.3.2.2  SAMPLE

4.3.2.2.1  Data Frames

   1  (string/*)   Qualified name of the sample set
   1  (tstamp/64)  Time of measurement
   +  (float/64)   Measurement to add to the sample set
                   (variadic: more than one value can be specified

4.3.2.2.2  Flags

   None.

4.3.2.3  TALLY

4.3.2.3.1  Data Frames

   1  (string/*)   Qualified name of the tally
   1  (tstamp/64)  Time of measurement
   ?  (uint/16)    Value to increment the tally by
                   (optional: if not specified, tally is incremented by 1)

4.3.2.3.2  Flags

   None.

4.3.2.4  DELTA

4.3.2.4.1  Data Frames

   1  (string/*)   Qualified name of the delta
   1  (tstamp/64)  Time of measurement
   1  (float/64)   Measurement value

4.3.2.4.2  Flags




J. Hunt                  Expires July 27, 2016                 [Page 15]

INTERNET DRAFT                    TSDP                  January 24, 2016


   None.

4.3.2.5  STATE

4.3.2.5.1  Data Frames

   1 (string/*)    Qualified name of the state
   1 (tstamp/64)   Time of state check
   1 (uint/32)     Check interval (in milliseconds)
   ? (string/*)    Summary message text

   If the check interval is 0, the check is not regular and should not
   be considered for freshness threshold violations.

4.3.2.5.2  Flags

   +--+--+--+--+--+--+--+--+
   | . (reserved) .. | ST  |
   +--+--+--+--+--+--+--+--+

   ST: (STATUS) Health status of the checked state

   [ 00 ]  (0)  OK - state is healthy
   [ 01 ]  (1)  WARNING - state is pre-failure
   [ 10 ]  (2)  CRITICAL - state is not healthy
   [ 11 ]  (3)  ERROR - error occurred detecting state

4.3.2.6  EVENT

4.3.2.6.1  Data Frames

   1 (string/*)    Qualified name of the event
   1 (tstamp/64)   Time event occurred
   1 (string/*)    Additional descriptive data about the event

4.3.2.6.2  Flags

   None.

4.3.2.7  FACT

4.3.2.7.1  Data Frames

   1 (string/*)    Qualified name of the fact
   1 (string/*)    Value of fact

4.3.2.7.2  Flags




J. Hunt                  Expires July 27, 2016                 [Page 16]

INTERNET DRAFT                    TSDP                  January 24, 2016


   None.

4.3.3  BROADCAST PDU

   The BROADCAST opcode is used by aggregators to send disseminate
   information about the state of the world to interested, connected
   subscriber(s).

4.3.3.1  Applicable PAYLOADs

   The only applicable PAYLOAD values for this opcode are:

          SAMPLE      TALLY        DELTA
          STATE       EVENT        FACT

          A PAYLOAD value must be supplied.  Any PDUs found without a
          PAYLOAD value set MUST be considered Bogon PDUs.

          PAYLOAD values cannot be combined.  Any PDUs found with
          multiple PAYLOAD values set MSUT be considered Bogon PDUs.

          Composition of constituent data frames, as well as the
          semantics of the FLAGS field depends on the PAYLOAD in use.
          These will be specified in the following subsections.

4.3.4.2  SAMPLE

4.3.4.2.1  Data Frames

   1 (string/*)    Qualified name of the sample set
   1 (tstamp/64)   Start of aggregation window
   1 (uint/32)     Aggregation window length (in milliseconds)
   1 (uint/16)     Number of measurements taken
   1 (float/64)    Population Minimum value
   1 (float/64)    Population Maximum value
   1 (float/64)    Population Mean value
   1 (float/64)    Population Median (50th percentile) value
   1 (float/64)    Population Standard Deviation

4.3.4.2.2  Flags

   None.

4.3.4.3  TALLY

4.3.4.3.1  Data Frames

   1 (string/*)    Qualified name of the tally



J. Hunt                  Expires July 27, 2016                 [Page 17]

INTERNET DRAFT                    TSDP                  January 24, 2016


   1 (tstamp/64)   Start of aggregation window
   1 (uint/32)     Aggregation window length (in milliseconds)
   1 (uint/64)     Value of Tally

4.3.4.3.2  Flags

   +--+--+--+--+--+--+--+--+
   |Ro| ... (reserved) ... |
   +--+--+--+--+--+--+--+--+

   Ro: (ROLLOVER) 64-bit unsigned integer bounds rollover detected; the
   tally value wrapped around, naturally.

   [ 0 ]  (0)  NO  - tally value has not rolled over; smaller value represents
                     a reset of the original quantity to 0.

   [ 1 ]  (1)  YES - tally value has rolled over; smaller value represents an
                     increase above the maximum value of a 64-bit unsigned
                     integer.

4.3.4.4  DELTA

4.3.4.4.1  Data Frames

   1 (string/*)    Qualified name of the delta
   1 (tstamp/64)   Start of aggregation window
   1 (uint/32)     Aggregation window length (in milliseconds)
   1 (float/64)    Calculated delta change

4.3.4.4.2  Flags

   +--+--+--+--+--+--+--+--+
   |  (reserved)  |  UNIT  |
   +--+--+--+--+--+--+--+--+

   UNIT: Unit time for calculated delta rate

   [ 000 ]  (0)  UNKNOWN
   [ 001 ]  (1)  0.1s   (100 milliseconds)
   [ 010 ]  (2)  1s     (1 second)
   [ 011 ]  (3)  60s    (1 minute)
   [ 100 ]  (4)  3600s  (1 hour)
   [ 101 ]  (5)  86400s (1 day)
     ...    ...  (reserved)
   [ 111 ]  (7)  (reserved)

4.3.4.5  STATE




J. Hunt                  Expires July 27, 2016                 [Page 18]

INTERNET DRAFT                    TSDP                  January 24, 2016


4.3.4.5.1  Data Frames

   1 (string/*)    Qualified name of the event
   1 (uint/32)     Heartbeat / Freshness window (in milliseconds)
   ? (tstamp/64)   Previous State: time of check
   ? (string/*)    Previous State: state description
   1 (tstamp/64)   Current State: time of check
   1 (string/*)    Current State: state description

4.3.4.5.2  Flags

   +--+--+--+--+--+--+--+--+
   |Fr|Tr| ... | PSv | CSv |
   +--+--+--+--+--+--+--+--+

   Fr: (FRESHNESS) state check freshness state

   [ 0 ]  (0)  STALE - no update received within window
   [ 1 ]  (1)  FRESH - update(s) received within window

   Tr: (TRANSITION) is this a transition broadcast?

   [ 0 ]  (0)  NO - no previous state data included
   [ 1 ]  (1)  YES - previous state data (Spr, etc.) included

   PSv: (PREVIOUS STATUS) Last known fresh status

   [ 00 ]  (0)  OK - state is healthy
   [ 01 ]  (1)  WARNING - state is pre-failure
   [ 10 ]  (2)  CRITICAL - state is not healthy
   [ 11 ]  (3)  ERROR - error occurred detecting state

   CSv: (CURRENT STATUS) Current (possible stale) status

   [ 00 ]  (0)  OK - state is healthy
   [ 01 ]  (1)  WARNING - state is pre-failure
   [ 10 ]  (2)  CRITICAL - state is not healthy
   [ 11 ]  (3)  ERROR - error occurred detecting state

4.3.4.6  EVENT

4.3.4.6.1  Data Frames

   1 (string/*)    Qualified name of the event
   1 (tstamp/64)   Time event occurred
   1 (string/*)    Additional descriptive data about the event

4.3.4.6.2  Flags



J. Hunt                  Expires July 27, 2016                 [Page 19]

INTERNET DRAFT                    TSDP                  January 24, 2016


   None.

4.3.4.7  FACT

4.3.4.7.1  Data Frames

   1 (string/*)    Qualified name of the fact
   1 (string/*)    Value of fact

4.3.4.7.2  Flags

   None.

4.3.4  FORGET PDU

   The FORGET opcode is used by system operators to drop one or more
   measurements or states.

4.3.4.1  Applicable PAYLOADs

   The only applicable PAYLOAD values for this opcode are:

          SAMPLE      TALLY        DELTA
          STATE

          A PAYLOAD value must be supplied.  Any PDUs found without a
          PAYLOAD value set MUST be considered Bogon PDUs.

          PAYLOAD values can be combined, meaning that they operate on
          any metric that matches at least one of the set PAYLOAD
          values.

4.3.4.2  Data Frames

   1 (string/*)    Qualified name, or name pattern (featuring globs)
                   of the measurement or state

   Qualified names are matched using the Name Equivalency Rules (defined
   in Section 3.2).

4.3.4.3  Flags

   FLAGS are interpreted the same regardless of what PAYLOAD values are
   set:

   +--+--+--+--+--+--+--+--+
   |Ig| ... (reserved) ... |
   +--+--+--+--+--+--+--+--+



J. Hunt                  Expires July 27, 2016                 [Page 20]

INTERNET DRAFT                    TSDP                  January 24, 2016


   Ig: (IGNORE) How to handle future data submissions

   [ 0 ]  (0)  NO  - ignore future data submissions
   [ 1 ]  (1)  YES - process future data submissions

4.3.5  REPLAY PDU

   The REPLAY opcode is used by subscribers to request a full re-
   broadcast of the most recent aggregated metrics, states, events and
   facts.  This re-transmission will be isolated to the connecting host
   IP and port. Aggregators MUST abide by any subscriptions in force for
   that endpoint. This allows subscribers to connect, set their
   subscriptions, request a re-broadcast, and then be assured that they
   are working on a complete set of measurements and other data.

   Note that EVENT data is fundamentally different from the other types,
   in that EVENTs are complete and isolated (they do not get regular
   updates). Aggregators MAY choose to buffer a certain number or
   timeframe of event data, and rebroadcast all items so buffered.

4.3.5.1  Applicable PAYLOADs

          SAMPLE      TALLY        DELTA
          STATE       EVENT        FACT

          A PAYLOAD value must be supplied.  Any PDUs found without a
          PAYLOAD value set MUST be considered Bogon PDUs.

          PAYLOAD values can be combined, meaning that they operate on
          any metric that matches at least one of the set PAYLOAD
          values.

4.3.5.2  Data Frames

          None.

4.3.5.3  Flags

          None.

4.3.6  SUBSCRIBE PDU

          The SUBSCRIBE opcode is used by subscribers to identify what
          subset of metrics, states, events and facts they are
          interested in receiving.  This allows a any subscriber to
          focus on a specific (possible very narrow) slice of the
          overall data, without wasting network bandwidth receiving
          BROADCAST packets it neither needs nor wants.



J. Hunt                  Expires July 27, 2016                 [Page 21]

INTERNET DRAFT                    TSDP                  January 24, 2016


          If the `Un' flag is set, the SUBSCRIBE opcode has the opposite
          effect - it removes the matching data streams from the
          endpoint's subscriptions.

          Conforming aggregators MUST drop subscription records after a
          period of inactivity, as specified by the `TTL' flag.
          Subscribers are expected to re-submit their subscriptions
          before this expiration deadline, to ensure uninterrupted
          broadcast service.

4.3.6.1  Applicable PAYLOADs

          SAMPLE      TALLY        DELTA
          STATES      EVENT        FACT

          A PAYLOAD value must be supplied.  Any PDUs found without a
          PAYLOAD value set MUST be considered Bogon PDUs.

          PAYLOAD values can be combined, meaning that they operate on
          any metric that matches at least one of the set PAYLOAD
          values.

4.3.6.2  Data Frames

   1 (string/*)    Qualified name, or name pattern (featuring globs)
                   of the measurement, state, event or fact.

4.3.6.3  Flags

   +--+--+--+--+--+--+--+--+
   |Un|  (reserved)  | TTL |
   +--+--+--+--+--+--+--+--+

   Un: (UNSUBSCRIBE) whether or not to subscribe / unsubscribe

   [ 0 ]  (0)  SUBSCRIBE - subscribe to the matching broadcasts
   [ 1 ]  (1)  UNSUBSCRIBE - unsubscribe from the matching broadcasts

   TTL: (TIME-TO-LIVE) how long before the aggregator can expire this
   subscription.

   [ 00 ]  (0)  60 seconds
   [ 01 ]  (1)  120 seconds
   [ 10 ]  (2)  240 seconds
   [ 11 ]  (3)  480 seconds






J. Hunt                  Expires July 27, 2016                 [Page 22]

INTERNET DRAFT                    TSDP                  January 24, 2016


5  Security Considerations

   None.


6  IANA Considerations

   None.


7  References

7.1  Normative References


7.2  Informative References



Authors' Addresses


   James Hunt

   EMail: james@niftylogic.com


























J. Hunt                  Expires July 27, 2016                 [Page 23]
